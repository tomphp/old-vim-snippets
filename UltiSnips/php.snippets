global !p
def read_composer_json():
	import json

	composer_file = 'composer.json'
	if not os.path.isfile(composer_file): return

	with open(composer_file) as data_file:
		config = json.load(data_file)

	return config

def get_autoload_paths():
	config = read_composer_json()

	if not config['autoload']: return []

	if not config['autoload']['psr-4']: return []

	return config['autoload']['psr-4']

def class_name_from_file():
	return re.match(r'.*(?=\.)', fn).group()

def get_namespace():
	dir_path = os.path.dirname(path) + '/'
	for ns, fp in get_autoload_paths().iteritems():
		m = re.search(r'' + re.escape(fp) + '(.*)', dir_path)
		if m: return (ns.strip('\\') + '\\' + m.group(1).replace('/', '\\')).strip('\\')

def is_custom_type(type):
	return (len(t[1]) > 0 and t[1][0].isupper())

def lowercase_first(string):
	if len(string) < 1: return ''

	return string[0].lower() + string[1:]

def uppercase_first(string):
	if len(string) < 1: return ''

	return string[0].upper() + string[1:]
endglobal


snippet <? "php open tag" b
<?php


endsnippet

snippet vdd "php var_dump and die"
var_dump(${1}); die();
endsnippet

snippet ns "php namespace" b
namespace `!p snip.rv = get_namespace()`;

endsnippet

snippet nc "php namespace and class" b
<?php

namespace `!p snip.rv = get_namespace()`;

final class `!p snip.rv = class_name_from_file()`
{
	$0
}
endsnippet

snippet ni "php namespace and interface" b
<?php

namespace `!p snip.rv = get_namespace()`;

interface `!p snip.rv = class_name_from_file()`
{
	$0
}
endsnippet

snippet nt "php namespace and trait" b
<?php

namespace `!p snip.rv = get_namespace()`;

trait `!p snip.rv = class_name_from_file()`
{
	$0
}
endsnippet

snippet c "class" b
final class ${1:`!p snip.rv = class_name_from_file()`}
{
	$0
}
endsnippet

snippet i "interface" b
interface ${1:`!p snip.rv = class_name_from_file()`}
{
	$0
}
endsnippet

snippet t "interface" b
trait ${1:`!p snip.rv = class_name_from_file()`}
{
	$0
}
endsnippet

snippet __ "php constructor" b
public function __construct($1)
{
	$0
}
endsnippet

snippet li "assign local variable to instance variable" b
$this->${1} = $$1;
endsnippet

snippet sg "Setter and Getter" b

/** @var ${1} */
private $${2:`!p if is_custom_type(t[1]): snip.rv = lowercase_first(t[1])`};

`!p snip.rv = '/** @param ' + t[1] + ' $' + t[2] + ' */'`
public function set`!p snip.rv = uppercase_first(t[2])`(`!p if is_custom_type(t[1]): snip.rv = t[1] + ' '`$$2)
{
	$this->$2 = `!p snip.rv = '' if is_custom_type(t[1]) else '(' + t[1] + ') '`$$2;
}

/** @return $1 */
public function get`!p snip.rv = uppercase_first(t[2])`()
{
	return $this->$2;
}
endsnippet

snippet if "php if" !b
if (${1}) {
	$0
}
endsnippet

snippet p "property" b
/** @var ${1} */
private $${2:`!p if (is_custom_type(t[1])): snip.rv = lowercase_first(t[1])`};

endsnippet

snippet m "method" b
${1:public} function ${2}(${3})
{
	${4}
}
endsnippet

snippet sm "setter" b
/** @param ${1} $${2:`!p snip.rv = lowercase_first(t[1]) if is_custom_type(t[1]) else ''`} */
public function set`!p snip.rv = uppercase_first(t[2])`(`!p snip.rv = t[1] + ' ' if is_custom_type(t[1]) else ''`$$2)
{
	$this->$2 = `!p snip.rv = '' if is_custom_type(t[1]) else '(' + t[1] + ') '`$$2;
}
endsnippet

snippet gm "getter" b
/** @return ${1} */
public function get${2:`!p snip.rv = t[1] if is_custom_type(t[1]) else ''`}()
{
	return $this->`!p snip.rv = lowercase_first(t[2])`;
}
endsnippet

snippet spec "phpspec test" b
public function it_${1}(${2})
{
	$0
}
endsnippet
